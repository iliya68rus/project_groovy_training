pipeline {
    agent any

    tools {
        gradle "GR"
        'org.jenkinsci.plugins.docker.commons.tools.DockerTool' '18.09'
    }

    environment {
        MODULES = "hw01-gradle,hw02-gradle,hw03-gradle,hw04-gradle,hw05-gradle"
        DOCKER_REGISTRY = 'groovytest123'
    }

    stages {
        stage('PrintSysTime') {
            steps {
                echo "branch name: ${branch}"
                script {
                    def now = java.time.LocalDateTime.now()
                    def time = now.format(java.time.format.DateTimeFormatter.ofPattern("HH:mm:ss dd.MM.yyyy"))
                    echo "time: ${time}"
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    for (def module in env.MODULES.split(",")) {
                        println "module name: ${module}"
                        sh "./gradlew ${module}:clean ${module}:build"
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    for (def module in env.MODULES.split(",")) {
                        println "module name: ${module}"
                        sh "./gradlew ${module}:test"
                    }
                }
            }
        }

        stage('Archive') {
            steps {
                script {
                    for (def module in env.MODULES.split(",")) {
                        println "module name: ${module}"
                        archiveArtifacts artifacts: "${module}/build/libs/*.jar", allowEmptyArchive: false
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    sh "docker version"
                    for (def module in env.MODULES.split(",")) {
                        println "module name: ${module}"
                        sh "docker build -t ${env.DOCKER_REGISTRY}/${module}:latest ."
                    }
                }
            }
        }
    }
}